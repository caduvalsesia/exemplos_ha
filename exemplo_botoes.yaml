###### Exemplo de botão animado

type: 'custom:button-card'
entity: switch.sonoff_10020352a4_1
name: Escritório
show_state: true
show_icon: false
custom_fields:
  icon: >
      [[[ const state = entity.state === 'on' ? 'door' : 'door reverse'; const opacity = entity.state === 'on' ? 'room' : 'room reverse';
            return `<svg viewBox="0 0 50 50"> <style>.door{animation: door 0.4s cubic-bezier(0.250, 0.460, 0.450, 0.940) both;}.room{animation: room 0.4s cubic-bezier(0.250, 0.460, 0.450, 0.940) both;}.reverse{animation-direction: reverse;}@keyframes door{0%{transform: none; fill: #9da0a2;}100%{transform: skewY(10deg) translate(4.5%, -3.9%) scaleX(0.8); fill: #b68349;}}@keyframes room{0%{opacity: 0;}100%{opacity: 1;}}</style>
            <path class="${opacity}" d="M11.4,1.4h27.2v43.1H11.4V1.4z" fill="#bcbcbc"/><path class="${state}" d="M11.4 1.4v43.1h27.2V1.4H11.4zm23 23.4c0 1.1-.9 1.9-1.9 1.9h0c-1.1 0-1.9-.9-1.9-1.9V21c0-1.1.9-1.9 1.9-1.9h0c1.1 0 1.9.9 1.9 1.9v3.8z"/></svg>`; ]]]
styles:
  card:
    - height: 180px
    - width: 200px
  name:
    - font-weight: 600
    - font-size: 28px
    - top: 55%
    - left: 10%
    - position: absolute
  state:
    - font-size: 16px
    - top: 78%
    - left: 10%
    - position: absolute
  custom_fields:
    icon:
      [top: 11%, left: 6.5%, width: 60px, position: absolute]

################################################################################################################################################################

##### Exemplo de botão com circulo informativo 

type: custom:button-card
entity: light.abajurmeninas
name: Abajur
show_state: true
show_icon: false
double_tap_action:
  action: more-info
custom_fields:
  notification: >
    [[[ 
    const brightness = Math.round(states['light.abajurmeninas'].attributes.brightness/2.54);
    const valor = Math.floor(brightness) + '%';
    const radius = 22.5; const circumference = radius * 2 * Math.PI; 
    return `<svg viewBox="0 0 50 50"><circle cx="25" cy="25" r="${radius}" stroke="#b2b2b2" stroke-width="1.5" fill="none" style="
    transform: rotate(-90deg); transform-origin: 50% 50%; stroke-dasharray: ${circumference}; stroke-dashoffset: ${circumference - brightness / 100 * circumference};" />
    <text x="50%" y="54%" fill="#8d8e90" font-size="14" text-anchor="middle" alignment-baseline="middle">${valor}</text></svg>`;  ]]]
  icon: |
    [[[ const state = entity.state === 'on' ? 'animate' : null;
      return `
        <svg viewBox="0 0 50 50">
          <style>
            @keyframes 
              animate { 
                0% { 
                  transform: scale(0.85);
                }
                20% {
                  transform: scale(1.1);
                }
                40% { 
                  transform: scale(0.95);
                }
                60% {
                  transform: scale(1.03);
                }
                80% { 
                  transform: scale(0.97);
                }
                100% { 
                  transform: scale(1);
                }
              }
              .animate { 
                animation: animate 0.8s; 
                transform-origin: center;
              }
          </style>
          <path fill="#9da0a2" d="M12 6a4 4 0 0 0-4 4v6H6v2h3v5h2v-5h2v5h2v-5h3v-2h-2v-6a4 4 0 0 0-4-4z"/>
          <path class="${state}" fill="var(--button-card-light-color)" d="M11 0v4h2V0h-2m7.3 2.29l-3.06 3l1.4 1.42l3.06-3l-1.4-1.42m-12.59 0L4.29 3.71l3 3l1.42-1.42l-3-3M2 9v2h4V9H2m16 0v2h4V9h-4z"/>
        </svg>
      `; 
    ]]]
styles:
  card:
    - height: 180px
    - width: 200px

  name:
    - font-weight: 600
    - font-size: 28px
    - top: 55%
    - left: 10%
    - position: absolute
  state:
    - font-size: 16px
    - top: 78%
    - left: 10%
    - position: absolute
  custom_fields:
    notification:
      [top: 5%, right: 3%, width: 50px, position: absolute, letter-spacing: 0.7px]
    icon:
      - top: 11%
      - left: 6.5%
      - width: 120px
      - position: absolute


################################################################################################################################################################

##### Exemplo de botão com circulo informativo - AR Condicionado

type: custom:button-card
entity: climate.arescritorio
name: Ar Escritório
show_state: true
show_icon: false
double_tap_action:
  action: more-info
variables:
  circle_input: >
    [[[
      if (entity) {
          return entity.state === 'cool'
              ? Math.round(entity.attributes.temperature).toString()
              : Math.round(entity.attributes.current_temperature).toString();
      }
    ]]]
  circle_input_unit: '°C'
custom_fields:
  notification: |
      [[[
        if (entity) {
            let r = 22.1,
                c = r * 2 * Math.PI,
                tspan = '<tspan dx=".2" dy="-.4">',
                domain = entity.entity_id.split('.')[0],
                state = variables.state_on,
                input = variables.circle_input || ' ',
                unit = variables.circle_input_unit || ' ';

            let circle = (state, input, unit) => {
                return `
                  <svg viewBox="0 0 50 50">
                    <style>
                      circle {
                        transform: rotate(-90deg);
                        transform-origin: 50% 50%;
                        stroke-dasharray: ${c};
                        stroke-dashoffset: ${typeof input === 'number' && c - input / 100 * c};
                        stroke-width: var(--c-stroke-width);
                        stroke: ${state ? 'var(--c-stroke-color-on)' : 'var(--c-stroke-color-off)'};
                        fill: ${state ? 'var(--c-fill-color-on)' : 'var(--c-fill-color-off)'};
                      }
                      text {
                        font-size: var(--c-font-size);
                        font-weight: var(--c-font-weight);
                        letter-spacing: var(--c-letter-spacing);
                        fill: var(--c-font-color);
                      }
                      tspan {
                        font-size: var(--c-unit-font-size);
                      }
                      #circle_value, tspan {
                        text-anchor: middle;
                        dominant-baseline: central;
                      }
                    </style>
                    <circle id="circle_stroke" cx="25" cy="25" r="${r}"/>
                    <text id="circle_value" x="50%" y="52%">${input}${tspan}${unit}</tspan></text>
                  </svg>

                  ${domain === 'light' && `
                      <input id="circle_slider" type="range" min="0" max="100" value="${input}">
                  `}
                `;
            }
            return circle(state, input, unit);
        }
      ]]]
  icon: >
     <svg viewBox="0 0 50 50">
        <path d="M36.8 1.2v1.7a5.34 5.34 0 0 1-5.3 5.3H18.4a5.34 5.34 0 0 1-5.3-5.3V1.2c-2.6.4-4.7 2.8-4.7 5.6v36.5c0 3.1 2.6 5.7 5.7 5.7h21.8c3.1 0 5.7-2.6 5.7-5.7V6.8c0-2.8-2.1-5.2-4.8-5.6zm-1.7 35.6c-.2 0-.4 0-.5-.1-.4-.1-1.2-.2-2.4-.6-.5-.2-.8-.3-1.2-.4-.3-.1-.7-.3-1.4-.5-1-.4-1.5-.5-1.9-.6-.5-.1-1.1-.2-1.9-.2s-1.4.2-1.9.4c-1 .3-1.8.7-2.1.9l-.6.3a9.75 9.75 0 0 1-1.4.6c-.3.1-.9.3-1.6.3h-.3c-.4 0-1 0-2-.2-.3-.1-.6-.1-.8-.2v-2.7l1.3.3c.5.1 1.3.2 1.7.2.5 0 .9-.2 1.1-.2.4-.1.6-.2 1-.4.2-.1.4-.2.7-.4.4-.2 1.3-.7 2.5-1 .6-.2 1.4-.4 2.5-.5s2 .1 2.5.2c.6.1 1.2.3 2.2.7l1.5.5c.3.1.6.2 1 .4 1 .3 1.8.5 2.1.5h.1v2.7zm0-6c-.2 0-.4 0-.5-.1-.4-.1-1.2-.2-2.4-.6-.5-.2-.8-.3-1.2-.4-.3-.1-.7-.3-1.4-.5-1-.4-1.5-.5-1.9-.6-.5-.1-1.1-.2-1.9-.2s-1.4.2-1.9.4c-1 .3-1.8.7-2.1.9l-.6.3a9.75 9.75 0 0 1-1.4.6c-.3.1-.9.3-1.6.3h-.3c-.4 0-1 0-2-.2-.3-.1-.6-.1-.8-.2v-2.7l1.3.3c.5.1 1.3.2 1.7.2.5 0 .9-.2 1.1-.2.4-.1.6-.2 1-.4.2-.1.4-.2.7-.4.4-.2 1.3-.7 2.5-1 .6-.2 1.4-.4 2.5-.5s2 .1 2.5.2c.6.1 1.2.3 2.2.7l1.5.5c.3.1.6.2 1 .4 1 .3 1.8.5 2.1.5h.1v2.7zm0-6c-.2 0-.4 0-.5-.1-.4-.1-1.2-.2-2.4-.6-.5-.2-.8-.3-1.2-.4-.3-.1-.7-.3-1.4-.5-1-.4-1.5-.5-1.9-.6-.5-.1-1.1-.2-1.9-.2s-1.4.2-1.9.4c-1 .3-1.8.7-2.1.9l-.6.3c-.4.2-.8.4-1.4.6-.3.1-.9.3-1.6.3h-.3c-.4 0-1 0-2-.2-.3-.1-.6-.1-.8-.2v-2.7l1.3.3c.5.1 1.3.2 1.7.2.5 0 .9-.2 1.1-.2.4-.1.6-.2 1-.4.2-.1.4-.2.7-.4.4-.2 1.3-.7 2.5-1 .6-.2 1.4-.4 2.5-.5s2 .1 2.5.2c.6.1 1.2.3 2.2.7l1.5.5c.3.1.6.2 1 .4 1 .3 1.8.5 2.1.5h.1v2.7zM15.7 1.9v-.8h18.6V3c0 1.5-1.2 2.8-2.8 2.8H18.4c-1.5 0-2.8-1.2-2.8-2.8V1.9z"/>
      </svg>
    
styles:
  card:
    - height: 180px
    - width: 200px
    - --c-stroke-color-on: '#b0b0b0'
    - --c-stroke-color-off: none
    - --c-fill-color-on: none
    - --c-fill-color-off: rgba(255,255,255,0.04)
    - --c-stroke-width: 2.3
    - --c-stroke-width-dragging: 4
    - --c-font-color: '#97989c'
    - --c-font-size: 14px
    - --c-unit-font-size: 10.5px
    - --c-font-weight: 700
    - --c-letter-spacing: -0.02rem
  name:
    - font-weight: 600
    - font-size: 28px
    - top: 55%
    - left: 10%
    - position: absolute
  state:
    - font-size: 16px
    - top: 78%
    - left: 10%
    - position: absolute
  custom_fields:
    notification:
      - top: 5%
      - right: 3%
      - width: 60px
      - position: absolute
      - letter-spacing: 0.7px
    icon:
      - top: 8%
      - position: absolute
      - width: 35%
      - margin-left: 1%
      - fill: >
          [[[ return entity.state === 'cool' || entity.state === 'fan_only' ? '#5daeea' : '#9da0a2'; ]]]
